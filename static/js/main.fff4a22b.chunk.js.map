{"version":3,"sources":["hooks/use-queue.tsx","containers/Log/index.tsx","index.tsx","containers/Log/styles.module.scss"],"names":["ActionType","jobsReducer","jobs","action","type","ADD","job","SHIFT","next","shift","CLEAR","isExecutingTaskReducer","status","useQueue","onJobFinished","useReducer","dispatch","isExecutingTask","setIsExecutingTask","useEffect","a","length","task","result","runJobs","addJob","clearJobs","Log","useState","logs","setLogs","addToLog","useCallback","record","nextLogs","push","activeTimeout","setActiveTimeout","handleAddJob","delay","actionTime","Date","Promise","resolve","timeoutId","setTimeout","resultTime","preparedValue","useMemo","reduce","message","className","styles","container","actions","map","key","onClick","clearTimeout","undefined","value","readOnly","textarea","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"sKAOKA,E,+EAAAA,O,aAAAA,I,iBAAAA,I,kBAAAA,M,KAoCL,IAAMC,EAAc,SAACC,EAAaC,GAChC,OAAQA,EAAOC,MACb,KAAKJ,EAAWK,IACd,MAAM,GAAN,mBAAWH,GAAX,CAAiBC,EAAOG,MAE1B,KAAKN,EAAWO,MACd,IAAMC,EAAI,YAAON,GAEjB,OADAM,EAAKC,QACED,EAET,KAAKR,EAAWU,MACd,MAAO,GAET,QACE,OAAOR,IAIPS,EAAyB,SAACC,EAAiBT,GAC/C,OAAOA,GA4CMU,EAzCE,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,cAAoD,EAC7CC,qBAAWd,EAAa,IADqB,mBAC/DC,EAD+D,KACzDc,EADyD,OAExBD,qBAC5CJ,GACA,GAJoE,mBAE/DM,EAF+D,KAE9CC,EAF8C,KAsCtE,OAlBAC,qBAAU,YACK,uCAAG,8BAAAC,EAAA,2DACVlB,EAAKmB,OAAS,IAAMJ,EADV,uBAEZC,GAAmB,GAEbZ,EAAMJ,EAAK,GAJL,SAKSI,EAAIgB,OALb,OAKNC,EALM,OAOZT,EAAcS,GAhBlBP,EAAS,CAAEZ,KAAMJ,EAAWO,QAmBxBW,GAAmB,GAVP,2CAAH,qDAcbM,KACC,CAACtB,EAAMe,EAAiBH,IAEpB,CAAEG,kBAAiBQ,OA/BX,SAACnB,GACdU,EAAS,CAAEZ,KAAMJ,EAAWK,IAAKC,SA8BDoB,UAvBhB,WAChBV,EAAS,CAAEZ,KAAMJ,EAAWU,QAC5BQ,GAAmB,M,gBCORS,EA5EC,WAAqB,IAAD,EACVC,mBAAiB,IADP,mBAC3BC,EAD2B,KACrBC,EADqB,KAG5BC,EAAWC,uBACf,SAACC,GACC,IAAMC,EAAQ,YAAOL,GACrBK,EAASC,KAAKF,GACdH,EAAQI,KAEV,CAACL,IAT+B,EAYJhB,EAAS,CACrCC,cAAeiB,IADTN,EAZ0B,EAY1BA,OAAQC,EAZkB,EAYlBA,UAZkB,EAgBQE,qBAhBR,mBAgB3BQ,EAhB2B,KAgBZC,EAhBY,KAkB5BC,EAAe,SAACC,GAAD,OAA0B,WAC7C,IAAMC,EAAa,IAAIC,KAEvBhB,EAAO,CACLH,KAAM,kBACJ,IAAIoB,SAAQ,SAACC,GACX,IAAMC,EAAYC,YAAW,WAC3BF,EAAQ,CACNC,YACAL,QACAC,aACAM,WAAY,IAAIL,SAET,IAARF,GAEHF,EAAiBO,WAenBG,EAAgBC,mBACpB,kBACEnB,EAAKoB,QAAO,SAACC,EAASjB,GAEpB,OADAiB,GAAO,UAAOjB,EAAOa,WAAd,aAA6Bb,EAAOM,MAApC,cAA+CN,EAAOO,WAAtD,UAEN,MACL,CAACX,IAGH,OACE,yBAAKsB,UAAWC,IAAOC,WACrB,yBAAKF,UAAWC,IAAOE,SACpB,CAAC,EAAG,EAAG,GAAGC,KAAI,SAAChB,GAAD,OACb,4BAAQiB,IAAKjB,EAAOkB,QAASnB,EAAaC,IAA1C,UACUA,MAGZ,4BAAQkB,QA3BA,WACRrB,IACFsB,aAAatB,GACbC,OAAiBsB,IAGnB7B,EAAQ,IACRJ,MAoBI,UAGF,6BACE,oCACA,8BAAUkC,MAAOb,EAAec,UAAQ,EAACV,UAAWC,IAAOU,cC9EnEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,UAAY,0BAA0B,QAAU,wBAAwB,SAAW,4B","file":"static/js/main.fff4a22b.chunk.js","sourcesContent":["import { useReducer, useEffect } from \"react\";\n\n// A task to be performed.\nexport interface Job {\n  task: () => Promise<any>;\n}\n\nenum ActionType {\n  ADD,\n  SHIFT,\n  CLEAR,\n}\n\ntype Action = {\n  type: ActionType;\n  job?: Job;\n};\n\n// TODO: can add onComplete props for future\nexport interface IQueueProps {\n  /**\n   * @description Action that will call after each job is completed\n   * @param {result} result The Job to be performed when this task is executed\n   */\n  onJobFinished: (result: any) => void;\n}\n\nexport interface IQueueReturnProps {\n  /**\n   * @description Adds a job to the end of the queue\n   * @param {Job} job The Job to be performed when this task is executed\n   */\n  addJob: (job: Job) => void;\n  /**\n   * @description Clear all jobs in queue\n   */\n  clearJobs: () => void;\n  /**\n   * @description Is queue currently busy\n   */\n  isExecutingTask: boolean;\n}\n\nconst jobsReducer = (jobs: Job[], action: Action): Job[] => {\n  switch (action.type) {\n    case ActionType.ADD:\n      return [...jobs, action.job] as Job[];\n\n    case ActionType.SHIFT:\n      const next = [...jobs];\n      next.shift();\n      return next;\n\n    case ActionType.CLEAR:\n      return [];\n\n    default:\n      return jobs;\n  }\n};\n\nconst isExecutingTaskReducer = (status: boolean, action: boolean) => {\n  return action;\n};\n\nconst useQueue = ({ onJobFinished }: IQueueProps): IQueueReturnProps => {\n  const [jobs, dispatch] = useReducer(jobsReducer, []);\n  const [isExecutingTask, setIsExecutingTask] = useReducer(\n    isExecutingTaskReducer,\n    false\n  );\n\n  const addJob = (job: Job) => {\n    dispatch({ type: ActionType.ADD, job });\n  };\n\n  const shiftJob = () => {\n    dispatch({ type: ActionType.SHIFT });\n  };\n\n  const clearJobs = () => {\n    dispatch({ type: ActionType.CLEAR });\n    setIsExecutingTask(false);\n  };\n\n  useEffect(() => {\n    const runJobs = async () => {\n      if (jobs.length > 0 && !isExecutingTask) {\n        setIsExecutingTask(true);\n\n        const job = jobs[0];\n        const result = await job.task();\n\n        onJobFinished(result);\n        shiftJob();\n\n        setIsExecutingTask(false);\n      }\n    };\n\n    runJobs();\n  }, [jobs, isExecutingTask, onJobFinished]);\n\n  return { isExecutingTask, addJob, clearJobs };\n};\n\nexport default useQueue;\n","import React, { useState, useMemo, useCallback, FC, ReactElement } from \"react\";\n\nimport useQueue from \"../../hooks/use-queue\";\n\nimport styles from \"./styles.module.scss\";\n\ninterface ILog {\n  timeoutId: ReturnType<typeof setTimeout>;\n  delay: number;\n  actionTime: Date;\n  resultTime: Date;\n}\n\nconst Log: FC = (): ReactElement => {\n  const [logs, setLogs] = useState<ILog[]>([]);\n\n  const addToLog = useCallback(\n    (record: ILog) => {\n      const nextLogs = [...logs];\n      nextLogs.push(record);\n      setLogs(nextLogs);\n    },\n    [logs]\n  );\n\n  const { addJob, clearJobs } = useQueue({\n    onJobFinished: addToLog,\n  });\n\n  const [activeTimeout, setActiveTimeout] = useState<ILog[\"timeoutId\"]>();\n\n  const handleAddJob = (delay: ILog[\"delay\"]) => (): void => {\n    const actionTime = new Date();\n\n    addJob({\n      task: () =>\n        new Promise((resolve) => {\n          const timeoutId = setTimeout(() => {\n            resolve({\n              timeoutId,\n              delay,\n              actionTime,\n              resultTime: new Date(),\n            });\n          }, delay * 1000);\n\n          setActiveTimeout(timeoutId);\n        }),\n    });\n  };\n\n  const reset = (): void => {\n    if (activeTimeout) {\n      clearTimeout(activeTimeout);\n      setActiveTimeout(undefined);\n    }\n\n    setLogs([]);\n    clearJobs();\n  };\n\n  const preparedValue = useMemo(\n    () =>\n      logs.reduce((message, record) => {\n        message += `${record.resultTime}: ${record.delay} / ${record.actionTime}\\n\\n`;\n        return message;\n      }, \"\"),\n    [logs]\n  );\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.actions}>\n        {[1, 2, 3].map((delay) => (\n          <button key={delay} onClick={handleAddJob(delay)}>\n            Button {delay}\n          </button>\n        ))}\n        <button onClick={reset}>Reset</button>\n      </div>\n\n      <div>\n        <h3>Logs</h3>\n        <textarea value={preparedValue} readOnly className={styles.textarea} />\n      </div>\n    </div>\n  );\n};\n\nexport default Log;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Log from \"./containers/Log\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Log />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__CmSqg\",\"actions\":\"styles_actions__XZD6e\",\"textarea\":\"styles_textarea__gqmHf\"};"],"sourceRoot":""}